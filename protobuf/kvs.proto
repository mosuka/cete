// Copyright (c) 2020 Minoru Osuka
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 		http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

package kvs;

option go_package = "github.com/mosuka/cete/protobuf";

service KVS {
    rpc Node (google.protobuf.Empty) returns (NodeResponse) {
        option (google.api.http) = {
            get: "/v1/node"
        };
    }
    rpc Join (JoinRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/cluster/{id}"
            body: "node"
        };
    }
    rpc Cluster (google.protobuf.Empty) returns (ClusterResponse) {
        option (google.api.http) = {
            get: "/v1/cluster"
        };
    }
    rpc Leave (LeaveRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/cluster/{id}"
        };
    }

    rpc Snapshot (google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            get: "/v1/snapshot"
        };
    }

    rpc Get (GetRequest) returns (GetResponse) {
        option (google.api.http) = {
            get: "/v1/data/{key=**}"
        };
    }
    rpc Set (SetRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/v1/data/{key=**}"
            body: "*"
        };
    }
    rpc Delete (DeleteRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/data/{key=**}"
        };
    }

    rpc Watch (google.protobuf.Empty) returns (stream WatchResponse) {}

    rpc Metrics (google.protobuf.Empty) returns (MetricsResponse) {
        option (google.api.http) = {
            get: "/v1/metrics"
        };
    }
}

message Metadata {
    string grpc_addr = 1;
    string http_addr = 2;
}

message Node {
    string bind_addr = 1;
    Metadata metadata = 2;
    string state = 3;
}

message Cluster {
    map<string, Node> nodes = 1;
    string leader = 2;
}

message JoinRequest {
    string id = 1;
    Node node = 2;
}

message LeaveRequest {
    string id = 1;
}

message NodeResponse {
    Node node = 1;
}

message ClusterResponse {
    Cluster cluster = 1;
}

message GetRequest {
    string key = 1;
}

message GetResponse {
    bytes value = 1;
}

message SetRequest {
    string key = 1;
    bytes value = 2;
}

message DeleteRequest {
    string key = 1;
}

message SetMetadataRequest {
    string id = 1;
    Metadata metadata = 2;
}

message DeleteMetadataRequest {
    string id = 1;
}

message Event {
    enum Type {
        Unknown = 0;
        Join = 1;
        Leave = 2;
        Set = 3;
        Delete = 4;
    }
    Type type = 1;
    google.protobuf.Any data = 2;
}

message WatchResponse {
    Event event = 1;
}

message MetricsResponse {
    bytes metrics = 1;
}

message KeyValuePair {
    string key = 1;
    bytes value = 2;
}
